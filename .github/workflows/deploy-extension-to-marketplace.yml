name: Docker Build and Push to AWS Marketplace

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'This will submit a new version of the listing in AWS Marketplace.Image tag for the ECR liquibase/liquibasepro.'
        required: true
        default: '' # Pass the value like 1.0.0
      dry_run:
        description: 'Run this as a dry run.'
        required: false
        type: boolean
        default: false

  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
#  https://datical.atlassian.net/browse/DAT-18638
#  We run this job to ensure that the right Liquibase-version is in Dockerfile and pom prior to submitting a new version to AWS Marketplace for approval
  check-OSS-version:
    runs-on:
      ubuntu-latest
    outputs:
      OSS_VERSION_MATCH: ${{ steps.check_versions.outputs.versions_match }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get liquibase version from pom.xml
        id: pom_liquibase_version
        run: |
          POM_LIQUIBASE_VERSION=$(grep -oP '(?<=<liquibase.version>)[^<]+' pom.xml)
          echo "Liquibase version: $POM_LIQUIBASE_VERSION"
          echo "pom_liquibase_version=$POM_LIQUIBASE_VERSION" >> $GITHUB_OUTPUT

      - name: Get liquibase version from Dockerfile
        id: dockerfile_liquibase_version
        run: |
          DOCKERFILE_LIQUIBASE_VERSION=$(grep -oP '^FROM liquibase/liquibase:\K[^\s]+' Dockerfile)
          echo "Liquibase version: $DOCKERFILE_LIQUIBASE_VERSION"
          echo "dockerfile_liquibase_version=DOCKERFILE_LIQUIBASE_VERSION" >> $GITHUB_OUTPUT

      - name: Check if versions match
        id: check_versions
        run: |
          if [ "$POM_LIQUIBASE_VERSION" == "$DOCKERFILE_LIQUIBASE_VERSION" ]; then
            echo "versions_match=true" >> $GITHUB_OUTPUT
          else
            echo "versions_match=false" >> $GITHUB_OUTPUT
          fi

      - name: Output version match result
        run: |
          echo "versions_match is set to: ${{ steps.check_versions.outputs.versions_match }}"

  build:
      if: github.actor == 'dependabot' && ${{ needs.check-OSS-version.outputs.OSS_VERSION_MATCH }} == true && ${{ inputs.dry_run == false }}
      runs-on:
          ubuntu-latest
      permissions:
        id-token: write
        contents: read
      needs: check-OSS-version
      env:
        AWS_REGION: us-east-1
      steps:
          - name: Checkout
            uses: actions/checkout@v4

          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              role-to-assume: ${{ secrets.AWS_MP_GITHUB_OIDC_ROLE_ARN_AWS_LICENSE_SERVICE }}
              aws-region: us-east-1

          - name: Set up QEMU
            uses: docker/setup-qemu-action@v3

          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3

          - name: Login to ECR Registry
            uses: docker/login-action@v3
            with:
              registry: ${{ secrets.AWS_MP_REGISTRY }}
              username: ${{ secrets.AWS_MP_ACCESS_KEY }}
              password: ${{ secrets.AWS_MP_ACCESS_KEY_ID }}

          - name: Get latest liquibase docker tag
            id: get_latest_tag
            run: |
              LATEST_TAG=$(grep -i "^FROM liquibase/liquibase:" Dockerfile | cut -d: -f2)
              echo "LATEST_TAG=$LATEST_TAG"
              echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

          - name: Build and Push Docker Image
            env:
              ECR_REGISTRY: ${{ secrets.AWS_MP_REGISTRY }}
            uses: docker/build-push-action@v6
            with:
              context: .
              file: Dockerfile
              no-cache: true
              push: true
              platforms: linux/amd64,linux/arm64
              tags: ${{ secrets.AWS_MP_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ steps.get_latest_tag.outputs.LATEST_TAG }}
            continue-on-error: true

          - name: Submit Request for AWS MP Listing
            env:
              ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
              IMAGE_TAG: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}
              PRODUCT_ID: ${{ secrets.PRODUCT_ID }}
              AWS_MP_REGISTRY: ${{ secrets.AWS_MP_REGISTRY }}
            run: |
              chmod +x ./.github/utils/submit-aws-mp-listing.sh
              ./.github/utils/submit-aws-mp-listing.sh

  dry-run:
    if: ${{ inputs.dry_run == true }}
    runs-on:
      ubuntu-latest
    permissions:
      id-token: write
      contents: read
    needs: check-OSS-version
    env:
      AWS_REGION: us-east-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_MP_GITHUB_OIDC_ROLE_ARN_AWS_LICENSE_SERVICE }}
          aws-region: us-east-1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ECR Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.AWS_MP_REGISTRY }}
          username: ${{ secrets.AWS_MP_ACCESS_KEY }}
          password: ${{ secrets.AWS_MP_ACCESS_KEY_ID }}

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_MP_REGISTRY }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          no-cache: true
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.AWS_MP_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.event.inputs.image_tag }}
        continue-on-error: true

      - name: Submit New Version Request for AWS MP Listing
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.event.inputs.image_tag }}
          PRODUCT_ID: ${{ secrets.PRODUCT_ID }}
          AWS_MP_REGISTRY: ${{ secrets.AWS_MP_REGISTRY }}
        run: |
          chmod +x ./.github/utils/submit-aws-mp-listing.sh
          ./.github/utils/submit-aws-mp-listing.sh
